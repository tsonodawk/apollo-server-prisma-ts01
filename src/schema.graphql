type Book {
  title: String
  author: String
}

type Company {
  id: Int
  companyName: String
  stores: [Store]
}

type Store {
  id: Int
  storeCode: String
  storeName: String
  companyId: Int
  company: Company
}

scalar DateTime

type Department {
  departmentCode: String!
  departmentName: String
  createdAt: DateTime
  updatedAt: DateTime
  employee: [Employee]
}

type Employee {
  employeeCode: String
  employeeName: String
  departmentCode: String
  department: Department
  createdAt: DateTime
  updatedAt: DateTime
}

type Room {
  id: ID!
  name: String
  messages: [Message]
}

type Message {
  id: ID!
  body: String
  chatUser: ChatUser
  room: Room
}

type ChatUser {
  id: ID!
  name: String
  messages: [Message]
}

type Query {
  books: [Book!]!
  # getRooms(id: ID): [Room]
  # getChatUser(id: ID!): ChatUser
  # listChatUsers: [ChatUser]
  # getMessages(id: ID): [Message]

  getCompanyById(id: Int!): Company
  listCompanys: [Company]
  getStoreByStoreCode(storeCode: String!): Store
  listStores: [Store]
  listStoresByCompanyId(companyId: Int!): [Store]

  listDepartment: [Department]
  listEmployee: [Employee]

  launches: [Launch]!
  launch(id: ID!): Launch
  # Queries for the current user
  # me: User
}

type Mutation {
  addDepartment(departmentCode: String!, departmentName: String!): Department
}

type Launch {
  id: ID!
  site: String
  mission: Mission
  rocket: Rocket
  isBooked: Boolean!
}

type Rocket {
  id: ID!
  name: String
  type: String
}

# type User {
#   id: ID!
#   email: String!
#   trips: [Launch]!
# }

type Mission {
  name: String
  missionPatch(size: PatchSize): String
}

enum PatchSize {
  SMALL
  LARGE
}

type Mutation {
  # if false, booking trips failed -- check errors
  bookTrips(launchIds: [ID]!): TripUpdateResponse!

  # if false, cancellation failed -- check errors
  cancelTrip(launchId: ID!): TripUpdateResponse!

  login(email: String): String # login token
}

type TripUpdateResponse {
  success: Boolean!
  message: String
  launches: [Launch]
}
